from _typeshed import Incomplete
from semaphore_client.configuration import Configuration as Configuration

class ProjectBackupTemplates:
    swagger_types: Incomplete
    attribute_map: Incomplete
    discriminator: Incomplete
    def __init__(self, inventory: Incomplete | None = None, repository: Incomplete | None = None, environment: Incomplete | None = None, view: Incomplete | None = None, name: Incomplete | None = None, playbook: Incomplete | None = None, description: Incomplete | None = None, allow_override_args_in_task: Incomplete | None = None, suppress_success_alerts: Incomplete | None = None, autorun: Incomplete | None = None, type: Incomplete | None = None, _configuration: Incomplete | None = None) -> None: ...
    @property
    def inventory(self): ...
    @inventory.setter
    def inventory(self, inventory) -> None: ...
    @property
    def repository(self): ...
    @repository.setter
    def repository(self, repository) -> None: ...
    @property
    def environment(self): ...
    @environment.setter
    def environment(self, environment) -> None: ...
    @property
    def view(self): ...
    @view.setter
    def view(self, view) -> None: ...
    @property
    def name(self): ...
    @name.setter
    def name(self, name) -> None: ...
    @property
    def playbook(self): ...
    @playbook.setter
    def playbook(self, playbook) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, description) -> None: ...
    @property
    def allow_override_args_in_task(self): ...
    @allow_override_args_in_task.setter
    def allow_override_args_in_task(self, allow_override_args_in_task) -> None: ...
    @property
    def suppress_success_alerts(self): ...
    @suppress_success_alerts.setter
    def suppress_success_alerts(self, suppress_success_alerts) -> None: ...
    @property
    def autorun(self): ...
    @autorun.setter
    def autorun(self, autorun) -> None: ...
    @property
    def type(self): ...
    @type.setter
    def type(self, type) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
